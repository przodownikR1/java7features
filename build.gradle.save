import java.lang.annotation.Target;

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'pmd'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply from: './properties.gradle'


description = "java 7 feature"

applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.7
targetCompatibility = 1.7

[compileJava, compileTestJava]*.options*.compilerArgs = [
    "-Xlint:none",
    "-g",
    "-encoding",
    "UTF-8"
]

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
}

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }

        resources { srcDir 'src/test/resources' }
    }
}
ext{


}
dependencies {
    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
    compile ("org.springframework:spring-core:${springVersion}")
    compile ("org.springframework:spring-beans:${springVersion}")
    compile ("org.springframework:spring-context:${springVersion}")
    compile ("org.springframework:spring-orm:${springVersion}")
    compile ("org.springframework:spring-tx:${springVersion}")

    testCompile ("org.springframework:spring-test:${springVersion}")

    compile ("org.springframework.data:spring-data-jpa:${springDataJPAVersion}")

    compile ("javax.validation:validation-api:${javaxValidationVersion}")
    compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
    compile ("org.hibernate:hibernate-core:${hibernateVersion}")
    compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")

    compile("joda-time:joda-time:${jodaTimeVersion}")
    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
    compile("org.codehaus.jackson:jackson-core-asl:${jacksonMapperVersion}")
    //compiler("joda-time:joda-time-hibernate:1.3")

    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")

    compile("com.jolbox:bonecp:${bonecpVersion}")
    compile("com.jolbox:bonecp-spring:${bonecpVersion}" )
    compile("com.jolbox:bonecp-provider:${bonecpVersion}")

    runtime("org.hsqldb:hsqldb:${hsqldbVersion}")
    compile("org.aspectj:aspectjrt:${aspectJVersion}")
    compile("org.aspectj:aspectjweaver:${aspectJVersion}")

    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:slf4j-ext:$slf4jVersion")
    runtime("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-core:$logbackVersion")

    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("junit:junit:$junitVersion")
    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    testCompile("com.googlecode.catch-exception:catch-exception:1.2.0")

    compile("org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-transports-http:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-ws-policy:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}")
    
    compile("org.apache.camel:camel-core:$camelVersion")
    testCompile("org.apache.camel:camel-test:$camelVersion")
    testCompile("org.apache.camel:camel-test-spring:$camelVersion")
    
    compile("org.apache.camel:camel-cxf:$camelVersion")
    compile("org.apache.camel:camel-cxf-transport:$camelVersion")
    
    compile("org.apache.camel:camel-spring:$camelVersion")
    compile("org.apache.camel:camel-jaxb:$camelVersion")
    compile("org.apache.camel:camel-jackson:$camelVersion")
    
}

//configurations {
//    all*.exclude group: "commons-logging", module: "commons-logging"
//}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "hibernate-jpa-2.0-api"
    }
}

jar {
    baseName = 'camel_cxf_kata'
    version =  '0.0.1'

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Implementation-Title': 'Gradle camel-cxf',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}


task wrapper(type: Wrapper) { gradleVersion = '10.1' }

